{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Ballerina!\n\n\nBallerina is the premier programming language designed for integration. It allows you to connect apps and services to handle all types of integration scenarios, such as collecting top tweets from a specific location and adding them to a Google spreadsheet, generating emails with real-time quotes pulled from a stock quote service, transforming and routing data based on advanced logic, and much more. \n\n\nFlexible\n\n\nYou can build your integrations from sequence diagrams, or write code in the Ballerina language or Swagger. You can also use plug-ins to write Ballerina code in IntelliJ IDEA, Vim, and more. Ballerina is open source, so you can see exactly how it works and join the growing community of users contributing to its code base. And its API allows you to leverage its functionality from other programs.\n\n\nPowerful\n\n\nThe Ballerina language was designed from the ground up specifically for integration and can handle everything from a simple Hello World program to complex service chaining and content-based routing scenarios. It comes with native support for REST, Swagger, JSON, and XML, and it includes connectors for popular services like Twitter and Facebook. The runtime is lightweight and incredibly fast, and you can run it alone without the development tools in a production environment.  \n\n\nBeautiful\n\n\nThe Ballerina Composer allows you to easily draw your integration scenario and all the components that need to interact by dragging and dropping elements onto a canvas. As you create the diagram, the integration code is written for you, and at any time you can switch to the Source view to see and modify the code. The Ballerina language syntax was modeled after the best practices of popular languages, so it's intuitive and easy to work with.   \n\n\nLet's go!\n\n\nTo get started, go to the \nQuick Tour\n and take Ballerina for a spin!", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-ballerina", 
            "text": "Ballerina is the premier programming language designed for integration. It allows you to connect apps and services to handle all types of integration scenarios, such as collecting top tweets from a specific location and adding them to a Google spreadsheet, generating emails with real-time quotes pulled from a stock quote service, transforming and routing data based on advanced logic, and much more.", 
            "title": "Welcome to Ballerina!"
        }, 
        {
            "location": "/#flexible", 
            "text": "You can build your integrations from sequence diagrams, or write code in the Ballerina language or Swagger. You can also use plug-ins to write Ballerina code in IntelliJ IDEA, Vim, and more. Ballerina is open source, so you can see exactly how it works and join the growing community of users contributing to its code base. And its API allows you to leverage its functionality from other programs.", 
            "title": "Flexible"
        }, 
        {
            "location": "/#powerful", 
            "text": "The Ballerina language was designed from the ground up specifically for integration and can handle everything from a simple Hello World program to complex service chaining and content-based routing scenarios. It comes with native support for REST, Swagger, JSON, and XML, and it includes connectors for popular services like Twitter and Facebook. The runtime is lightweight and incredibly fast, and you can run it alone without the development tools in a production environment.", 
            "title": "Powerful"
        }, 
        {
            "location": "/#beautiful", 
            "text": "The Ballerina Composer allows you to easily draw your integration scenario and all the components that need to interact by dragging and dropping elements onto a canvas. As you create the diagram, the integration code is written for you, and at any time you can switch to the Source view to see and modify the code. The Ballerina language syntax was modeled after the best practices of popular languages, so it's intuitive and easy to work with.", 
            "title": "Beautiful"
        }, 
        {
            "location": "/#lets-go", 
            "text": "To get started, go to the  Quick Tour  and take Ballerina for a spin!", 
            "title": "Let's go!"
        }, 
        {
            "location": "/quick-tour/", 
            "text": "Quick Tour\n\n\nNow that you know \na little bit about Ballerina\n, let's take it for a spin! \n\n\nInstall Ballerina\n\n\n\n\nGo to \nhttp://www.ballerinalang.org\n and click \nDownload\n. \n\n\nDownload the Ballerina Tools distribution and unzip it on your computer. Ballerina Tools includes the Ballerina runtime plus the visual editor (Composer) and other tools. \n\n\nAdd the \nballerina_home\n/bin\n directory to your $PATH environment variable so that you can run the Ballerina commands from anywhere. \n\n\n\n\n\n\nNOTE: Throughout this documentation, \nballerina_home\n refers to the Ballerina directory you just installed. \n\n\n\n\nRun HelloWorld\n\n\nThe HelloWorld sample will show you how easy it is to run Ballerina, send it a request, and get a response. \n\n\nLet's take a look at what the sample looks like in the Ballerina programming language:\n\n\nfunction main (string[] args) {\n  println(\nHello, World!\n);\n}\n\n\n\n\nThe HelloWorld sample doesn't take any specific input, so simply running it will cause it to print \"Hello, World!\" at the command line.\n\n\nAt the command prompt, navigate to the \nballerina_home\n/samples/helloWorld\n directory and enter the following line:\n\n\nballerina run helloworld.bal\n\n\n\n\nYou will see the following response:\n\n\nHello, World!\n\n\n\n\nYou just started Ballerina, ran the HelloWorld sample, and got a response within seconds. \n\n\nPretty simple and straightforward, right? Now, let's look at something a little more interesting: the Composer.\n\n\nWhy Ballerina Composer\n\n\nThe Ballerina Composer provides a flexible and powerful browser-based tool for creating your Ballerina programs. This is a revolutionary way of doing programming for integration due to its use of sequence diagrams, enabling you to architecturally generate your code while designing your solution. The Ballerina Composer sets Ballerina apart from other integration paradigms due to its unique visual representation.\n\n\nYou can build your integrations by creating sequence diagrams, dragging elements from a tool palette onto a canvas. As you build the diagrams, the underlying code is written for you, which you can work with in the Source view. You can also use the Swagger view to define services by writing Swagger definitions. You can switch seamlessly between the Design view, Source view, and Swagger view and create your programs in the way that you like to work.\n\n\nRun the Composer\n\n\n\n\n\n\nAt the command prompt, type \ncomposer\n.\n\n\n\n\n\n\nAccess the Composer from the following URL in your browser: http://localhost:9091\n\n\nThe welcome page of Ballerina Composer appears. \n\n\n\n\n\n\n\n\nLet's open a sample and take a look around.\n\n\n\nExplore the Ballerina Composer\n\n\nOnce you have accessed the composer, you can have a look around using the available samples in the welcome page of the Ballerina Composer.\n\n\n\n\n\n\nClick \nechoService\n.\n\n\nThe Echo Service program displays in the Composer.\n\n\n\n\nNotice that on the left you have a tool palette containing the various constructs that you'll use to build your integration. On the right, you have a visual editor with a canvas onto which you drag those constructs. This is where you build your sequence diagrams that define your integration logic. \n\n\n\n\nSome constructs have a \nlife line\n of execution where you program the statements to be executed. This defines the flow of execution. The life line is represented by a vertical line in the default program or any other construct of the \nechoService\n.\n\n\n\n\nThere are packages called \nConnectors\n and \nLibraries\n that are available to be used by your Ballerina program. By default, the Composer imports few commonly used packages to this section. If you add an import to a different package, it is added to this section. Hovering over these packages provides a link to the documentation for each of these libraries, including the available functions and their usage. Click the eye icon to view more connectors and libraries.\n\n\n\n\nNotice the \nSource View\n button and the \nSplit View\n button in the lower right corner. Also note the \nSwagger Source\n button associated with the service.\n\n\n\n\n\n\n\n\nClick \nSource View\n. \n\n\n\n\nYou'll see the source code editor that represents the sequence diagram as code in the Ballerina language. You can go back and forth between the visual editor and the source code and make your edits in either place. This can be done by clicking \nDesign View\n in the lower right corner.\n\n\n\n\n\n\nClick \nSwagger View\n. \n\n\n\n\nIf your Ballerina program contains services and resources, you can view the generated Swagger definition for your program by switching to the Swagger view. This editor allows you to write Swagger definitions to create services. All the changes made on the Swagger definition will reflect on the Ballerina program when you switch back to Source or Design view.\n\n\n\n\n\n\nClick \nDesign View\n to return to the visual editor. If you happen to write the source code completely in the source view, when you switch to Design view, the Visual representation is created.\n\n\n\n\n\n\nYou can run your program from the Composer itself. Click the \nRun\n button on the left of the Composer and choose whether you want to run your program as an \nApplication\n or a \nService\n. You can stop the application by clicking \nStop Application\n.\n\n\n\n\n\n\n\n\nClick the \"x\" to the right of \"echoService.bal\" in the tab title to close this sample, and click \nDon't Save\n when prompted.\n\n\n\n\n\n\nWhats Next\n\n\nNow that you've had a look around, it's time to start using Ballerina and \nwrite your first Ballerina program\n.", 
            "title": "Quick Tour"
        }, 
        {
            "location": "/quick-tour/#quick-tour", 
            "text": "Now that you know  a little bit about Ballerina , let's take it for a spin!", 
            "title": "Quick Tour"
        }, 
        {
            "location": "/quick-tour/#install-ballerina", 
            "text": "Go to  http://www.ballerinalang.org  and click  Download .   Download the Ballerina Tools distribution and unzip it on your computer. Ballerina Tools includes the Ballerina runtime plus the visual editor (Composer) and other tools.   Add the  ballerina_home /bin  directory to your $PATH environment variable so that you can run the Ballerina commands from anywhere.     NOTE: Throughout this documentation,  ballerina_home  refers to the Ballerina directory you just installed.", 
            "title": "Install Ballerina"
        }, 
        {
            "location": "/quick-tour/#run-helloworld", 
            "text": "The HelloWorld sample will show you how easy it is to run Ballerina, send it a request, and get a response.   Let's take a look at what the sample looks like in the Ballerina programming language:  function main (string[] args) {\n  println( Hello, World! );\n}  The HelloWorld sample doesn't take any specific input, so simply running it will cause it to print \"Hello, World!\" at the command line.  At the command prompt, navigate to the  ballerina_home /samples/helloWorld  directory and enter the following line:  ballerina run helloworld.bal  You will see the following response:  Hello, World!  You just started Ballerina, ran the HelloWorld sample, and got a response within seconds.   Pretty simple and straightforward, right? Now, let's look at something a little more interesting: the Composer.", 
            "title": "Run HelloWorld"
        }, 
        {
            "location": "/quick-tour/#why-ballerina-composer", 
            "text": "The Ballerina Composer provides a flexible and powerful browser-based tool for creating your Ballerina programs. This is a revolutionary way of doing programming for integration due to its use of sequence diagrams, enabling you to architecturally generate your code while designing your solution. The Ballerina Composer sets Ballerina apart from other integration paradigms due to its unique visual representation.  You can build your integrations by creating sequence diagrams, dragging elements from a tool palette onto a canvas. As you build the diagrams, the underlying code is written for you, which you can work with in the Source view. You can also use the Swagger view to define services by writing Swagger definitions. You can switch seamlessly between the Design view, Source view, and Swagger view and create your programs in the way that you like to work.", 
            "title": "Why Ballerina Composer"
        }, 
        {
            "location": "/quick-tour/#run-the-composer", 
            "text": "At the command prompt, type  composer .    Access the Composer from the following URL in your browser: http://localhost:9091  The welcome page of Ballerina Composer appears.      Let's open a sample and take a look around.", 
            "title": "Run the Composer"
        }, 
        {
            "location": "/quick-tour/#explore-the-ballerina-composer", 
            "text": "Once you have accessed the composer, you can have a look around using the available samples in the welcome page of the Ballerina Composer.    Click  echoService .  The Echo Service program displays in the Composer.   Notice that on the left you have a tool palette containing the various constructs that you'll use to build your integration. On the right, you have a visual editor with a canvas onto which you drag those constructs. This is where you build your sequence diagrams that define your integration logic.    Some constructs have a  life line  of execution where you program the statements to be executed. This defines the flow of execution. The life line is represented by a vertical line in the default program or any other construct of the  echoService .   There are packages called  Connectors  and  Libraries  that are available to be used by your Ballerina program. By default, the Composer imports few commonly used packages to this section. If you add an import to a different package, it is added to this section. Hovering over these packages provides a link to the documentation for each of these libraries, including the available functions and their usage. Click the eye icon to view more connectors and libraries.   Notice the  Source View  button and the  Split View  button in the lower right corner. Also note the  Swagger Source  button associated with the service.     Click  Source View .    You'll see the source code editor that represents the sequence diagram as code in the Ballerina language. You can go back and forth between the visual editor and the source code and make your edits in either place. This can be done by clicking  Design View  in the lower right corner.    Click  Swagger View .    If your Ballerina program contains services and resources, you can view the generated Swagger definition for your program by switching to the Swagger view. This editor allows you to write Swagger definitions to create services. All the changes made on the Swagger definition will reflect on the Ballerina program when you switch back to Source or Design view.    Click  Design View  to return to the visual editor. If you happen to write the source code completely in the source view, when you switch to Design view, the Visual representation is created.    You can run your program from the Composer itself. Click the  Run  button on the left of the Composer and choose whether you want to run your program as an  Application  or a  Service . You can stop the application by clicking  Stop Application .     Click the \"x\" to the right of \"echoService.bal\" in the tab title to close this sample, and click  Don't Save  when prompted.", 
            "title": "Explore the Ballerina Composer"
        }, 
        {
            "location": "/quick-tour/#whats-next", 
            "text": "Now that you've had a look around, it's time to start using Ballerina and  write your first Ballerina program .", 
            "title": "Whats Next"
        }
    ]
}