<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta property="og:url"                content="https://ballerinalang.org" />
  <meta property="og:type"               content="article" />
  <meta property="og:title"              content="Flexible. Powerful. Beautiful." />
  <meta property="og:description"        content="Ballerina by Example is a hands-on introduction to Ballerina using annotated example programs. Check out the first example or browse the full list below. " />
  <meta property="og:image"              content="http://ballerinalang.org/img/ballerina-fb.jpg" />
    <title>Ballerina by Example: Try/Catch/Finally</title>
    <!--GA-->
      <script>
         (function (i, s, o, g, r, a, m) {
             i['GoogleAnalyticsObject'] = r;
             i[r] = i[r] || function () {
                 (i[r].q = i[r].q || []).push(arguments)
             }, i[r].l = 1 * new Date();
             a = s.createElement(o),
                     m = s.getElementsByTagName(o)[0];
             a.async = 1;
             a.src = g;
             m.parentNode.insertBefore(a, m)
         })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
         
         ga('create', 'UA-92163714-1', 'auto');
         ga('send', 'pageview');
         
      </script>
      <!-- Google Tag Manager -->
      <script>(function (w, d, s, l, i) {
         w[l] = w[l] || [];
         w[l].push({'gtm.start':
                     new Date().getTime(), event: 'gtm.js'});
         var f = d.getElementsByTagName(s)[0],
                 j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
         j.async = true;
         j.src =
                 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
         f.parentNode.insertBefore(j, f);
         })(window, document, 'script', 'dataLayer', 'GTM-KW2LLTW');
      </script>
      <!-- End Google Tag Manager -->
      <!-- Hotjar Tracking Code for https://ballerinalang.org/ --> 
      <script>
         (function (h, o, t, j, a, r) {
             h.hj = h.hj || function () {
                 (h.hj.q = h.hj.q || []).push(arguments)
             };
             h._hjSettings = {hjid: 442732, hjsv: 5};
             a = o.getElementsByTagName('head')[0];
             r = o.createElement('script');
             r.async = 1;
             r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
             a.appendChild(r);
         })(window, document, '//static.hotjar.com/c/hotjar-', '.js?sv=');
      </script>
    
     <link href="//b.content.wso2.com/sites/all/bootstrap/css/bootstrap.css?230617" rel="stylesheet">
      <script src="//b.content.wso2.com/sites/all/bootstrap/js/jquery.js?230617"></script>
      <script src="//b.content.wso2.com/sites/all/bootstrap/js/bootstrap.js?230617"></script>
      
      <script src="//b.content.wso2.com/sites/all/ballerina/ballerina-example.js"></script>
<script  defer="defer" src="//wso2.cachefly.net/wso2/sites/all/ballerina/js/ballerina.js"></script>
    <link rel=stylesheet href="site.css">
    <link href="//fonts.googleapis.com/css?family=Cairo:200,300,400,600,700,900" rel="stylesheet">
    <link rel=stylesheet href="//b.content.wso2.com/sites/all/ballerina/ballerina-example.css">
    
    
  </head>
  <body>
        <div class="row cBallerinaNav" id="iBallerinaNavigation">

        </div>
      <div class="row cBallerinaBySampleRow">
          <div class="container cBallerinaBySampleContainer">
              <div class="example" id="try-catch-finally">
                  <div class="col-xs-11 col-sm-11 col-md-11">
                      <h2><a href="./">Ballerina by Example</a>: Try/Catch/Finally</h2>
                  </div>
                  <div class="col-xs-1 col-sm-1 col-md-1">
                      <a href="./" class="cBackButton"><img src="http://b.content.wso2.com/sites/all/ballerina/backbutton.svg"/></a>
                  </div>
                  <div class="col-xs-12 col-sm-12 col-md-12">

                      

                      <table>
                          
                          <tr>
                              <td class="docs">
                                  <p>Throwing an error generally means an unexpected error has happend, and the code that
 handles the thrown error is not expected to be able to do much to recover from it,
 rather than perhaps catch and log it.
 Throwing errors will be very rare and will happen under exceptional circumstances such as server going out of memory, running out of disk space.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre><span class="kn">import</span> <span class="nx">ballerina</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">errors</span><span class="p">;</span>
<span class="kn">import</span> <span class="nx">ballerina</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">files</span><span class="p">;</span>
<span class="kn">import</span> <span class="nx">ballerina</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">system</span><span class="p">;</span>
<span class="kn">import</span> <span class="nx">ballerina</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">strings</span><span class="p">;</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  
                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre><span class="kd">function</span> <span class="nx">main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">string</span><span class="p">[]</span> <span class="nx">data</span> <span class="p">=</span> <span class="kc">null</span><span class="p">;</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Suppose we are creating a file, and writing some data.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>    <span class="nx">files</span><span class="p">:</span><span class="nx">File</span> <span class="nx">target</span> <span class="p">=</span> <span class="p">{</span><span class="nx">path</span><span class="p">:</span><span class="s">&quot;/tmp/result.txt&quot;</span><span class="p">};</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Use a try block to surrounds a code segment that an error may occur.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>    <span class="nx">try</span> <span class="p">{</span>
        <span class="nx">files</span><span class="p">:</span><span class="nx">open</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">);</span>
        <span class="kt">blob</span> <span class="nx">c1</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">:</span><span class="nx">toBlob</span><span class="p">(</span><span class="s">&quot;Content1&quot;</span><span class="p">,</span> <span class="s">&quot;utf-8&quot;</span><span class="p">);</span>
        <span class="nx">files</span><span class="p">:</span><span class="nx">write</span><span class="p">(</span><span class="nx">c1</span><span class="p">,</span> <span class="nx">target</span><span class="p">);</span>
        <span class="nx">system</span><span class="p">:</span><span class="nb">println</span><span class="p">(</span><span class="s">&quot;content is written to file&quot;</span><span class="p">);</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Accessing a null variable &lsquo;data&rsquo; cause NullReferenceError to be thrown.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>        <span class="kt">blob</span> <span class="nx">c2</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">:</span><span class="nx">toBlob</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;utf-8&quot;</span><span class="p">);</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Non of the following lines will get executed after the error.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>        <span class="nx">files</span><span class="p">:</span><span class="nx">write</span><span class="p">(</span><span class="nx">c2</span><span class="p">,</span> <span class="nx">target</span><span class="p">);</span>
        <span class="nx">system</span><span class="p">:</span><span class="nb">println</span><span class="p">(</span><span class="s">&quot;content is written to file&quot;</span><span class="p">);</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>A Catch block executes, when an error is thrown from the enclosing try
block and the thrown error type and catch clause&rsquo;s error type are matched, or
if there is no match, then the catch is the first in the order, where thrown
error type and catch clause&rsquo;s error type are structurally equivalent.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>    <span class="p">}</span> <span class="nx">catch</span> <span class="p">(</span><span class="nx">errors</span><span class="p">:</span><span class="nx">Error</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">system</span><span class="p">:</span><span class="nb">println</span><span class="p">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">msg</span><span class="p">);</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Catching specific error type &lsquo;errors:NullReferenceError&rsquo;.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>    <span class="p">}</span> <span class="nx">catch</span> <span class="p">(</span><span class="nx">errors</span><span class="p">:</span><span class="nx">NullReferenceError</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">system</span><span class="p">:</span><span class="nb">println</span><span class="p">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">msg</span><span class="p">);</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Finally block always executes when the execution exits from the try block or
catch block when an error occurred. It is also useful, not only in an anomalous
situation, where the execution exit the try block using a return, break, abort.
Use finally block to do cleanup tasks i.e File Close, SQL Connection Close etc.</p>

                              </td>
                              <td class="code leading">
                                  <div class="highlight"><pre>    <span class="p">}</span> <span class="nx">finally</span> <span class="p">{</span>
</pre></div>

                              </td>
                          </tr>
                          
                          <tr>
                              <td class="docs">
                                  <p>Closing the file.</p>

                              </td>
                              <td class="code">
                                  <div class="highlight"><pre>        <span class="nx">files</span><span class="p">:</span><span class="nx">close</span><span class="p">(</span><span class="nx">target</span><span class="p">);</span>
        <span class="nx">system</span><span class="p">:</span><span class="nb">println</span><span class="p">(</span><span class="s">&quot;File Closed&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

                              </td>
                          </tr>
                          
                      </table>


                      

                      <table>
                          
                          <tr>
                              <td class="docs">
                                  
                              </td>
                              <td class="code">
                                  <div class="highlight"><pre><span class="gp">$</span> ballerina run main try-catch-finally.bal
<span class="go">content1 is written to file</span>
<span class="go">Caught NullReferenceError. Exiting program</span>
<span class="go">File Closed</span>
</pre></div>

                              </td>
                          </tr>
                          
                      </table>


                      
                      
                      <p class="next">
                          Next example: <a href="base-path-and-path">Base Path and Path</a>.
                      </p>
                      

                  </div>
                  <div class="col-xs-12 col-sm-12 col-md-12 cGOfooter">
                      <p class="footer">
                          by <a href="https://twitter.com/ballerinalang">@ballerinalang</a> | <a href="mailto:ballerina-dev@googlegroups.com">feedback</a> | <a href="https://github.com/ballerinalang/ballerina/tree/master/samples/ballerina-by-example/examples/try-catch-finally">source</a>
                      </p>
                      <p class="attrib">
                          This site was generated using a <a href="https://github.com/mmcgrana/gobyexample/">tool</a> developed by <a href="https://twitter.com/mmcgrana">@mmcgrana</a>, licensed under <a href="https://creativecommons.org/licenses/by/2.0/">CC BY</a> / modified from original
                      </p>
                  </div>
              </div>
              
          </div>
      </div>
      <div class="row cBallerinaFooter" id="iBallerinaFooter">
      </div>
      
  </body>
</html>
